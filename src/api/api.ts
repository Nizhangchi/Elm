/* tslint:disable */
/* eslint-disable */
/**
 * Demo API
 *  This is a demo app
 *
 * The version of the OpenAPI document:  v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 为用户添加角色时所需的请求体
 * @export
 * @interface AddRoleToUserRO
 */
export interface AddRoleToUserRO {
    /**
     * 用户ID
     * @type {string}
     * @memberof AddRoleToUserRO
     */
    'userId': string;
    /**
     * 角色ID
     * @type {string}
     * @memberof AddRoleToUserRO
     */
    'roleId': string;
}
/**
 * 验证码信息
 * @export
 * @interface CaptchaRO
 */
export interface CaptchaRO {
    /**
     * 验证码ID
     * @type {string}
     * @memberof CaptchaRO
     */
    'id'?: string;
    /**
     * 验证码
     * @type {string}
     * @memberof CaptchaRO
     */
    'value': string;
}
/**
 * 验证码信息
 * @export
 * @interface CaptchaVO
 */
export interface CaptchaVO {
    /**
     * 验证码ID
     * @type {string}
     * @memberof CaptchaVO
     */
    'id'?: string;
    /**
     * 验证码图片的Base64编码
     * @type {string}
     * @memberof CaptchaVO
     */
    'imageBase64'?: string;
}
/**
 * 修改密码时提交的请求体
 * @export
 * @interface ChangePasswordRO
 */
export interface ChangePasswordRO {
    /**
     * 旧密码
     * @type {string}
     * @memberof ChangePasswordRO
     */
    'oldPassword': string;
    /**
     * 新密码
     * @type {string}
     * @memberof ChangePasswordRO
     */
    'newPassword': string;
}
/**
 * 异常信息
 * @export
 * @interface ExceptionVO
 */
export interface ExceptionVO {
    /**
     * 异常代码
     * @type {string}
     * @memberof ExceptionVO
     */
    'type'?: ExceptionVOTypeEnum;
    /**
     * 异常信息
     * @type {string}
     * @memberof ExceptionVO
     */
    'message'?: string;
    /**
     * 异常详细信息
     * @type {string}
     * @memberof ExceptionVO
     */
    'detail'?: string;
}

export const ExceptionVOTypeEnum = {
    ValidationError: 'VALIDATION_ERROR',
    LoginError: 'LOGIN_ERROR',
    LoginCaptchaError: 'LOGIN_CAPTCHA_ERROR',
    BusinessError: 'BUSINESS_ERROR',
    PersistenceError: 'PERSISTENCE_ERROR',
    DataAccessError: 'DATA_ACCESS_ERROR',
    AssertError: 'ASSERT_ERROR',
    AccessDeniedError: 'ACCESS_DENIED_ERROR',
    NoResourceFoundError: 'NO_RESOURCE_FOUND_ERROR',
    HttpMessageError: 'HTTP_MESSAGE_ERROR',
    AuthenticationError: 'AUTHENTICATION_ERROR',
    InternalError: 'INTERNAL_ERROR'
} as const;

export type ExceptionVOTypeEnum = typeof ExceptionVOTypeEnum[keyof typeof ExceptionVOTypeEnum];

/**
 * 登录时提交的请求体
 * @export
 * @interface LoginRO
 */
export interface LoginRO {
    /**
     * 用户登录名
     * @type {string}
     * @memberof LoginRO
     */
    'username': string;
    /**
     * 登录密码
     * @type {string}
     * @memberof LoginRO
     */
    'password': string;
    /**
     * 
     * @type {CaptchaRO}
     * @memberof LoginRO
     */
    'captcha'?: CaptchaRO;
}
/**
 * 
 * @export
 * @interface NewRoleRO
 */
export interface NewRoleRO {
    /**
     * 角色名称
     * @type {string}
     * @memberof NewRoleRO
     */
    'name': string;
}
/**
 * 新增用户所需的请求体对象
 * @export
 * @interface NewUserRO
 */
export interface NewUserRO {
    /**
     * 用户代码
     * @type {string}
     * @memberof NewUserRO
     */
    'code': string;
    /**
     * 用户姓名
     * @type {string}
     * @memberof NewUserRO
     */
    'name': string;
    /**
     * 用户密码
     * @type {string}
     * @memberof NewUserRO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface RoleVO
 */
export interface RoleVO {
    /**
     * 
     * @type {string}
     * @memberof RoleVO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleVO
     */
    'name'?: string;
}
/**
 * 登录成功后返回的令牌对象
 * @export
 * @interface TokenVO
 */
export interface TokenVO {
    /**
     * 访问令牌
     * @type {string}
     * @memberof TokenVO
     */
    'access_token'?: string;
    /**
     * 刷新令牌
     * @type {string}
     * @memberof TokenVO
     */
    'refresh_token'?: string;
    /**
     * 访问令牌的过期时间
     * @type {number}
     * @memberof TokenVO
     */
    'expires_in'?: number;
}
/**
 * 
 * @export
 * @interface UpdateRoleRO
 */
export interface UpdateRoleRO {
    /**
     * 
     * @type {string}
     * @memberof UpdateRoleRO
     */
    'id': string;
    /**
     * 角色名称
     * @type {string}
     * @memberof UpdateRoleRO
     */
    'name': string;
}
/**
 * 更新用户基本信息的请求体对象
 * @export
 * @interface UpdateUserRO
 */
export interface UpdateUserRO {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRO
     */
    'id': string;
    /**
     * 用户代码
     * @type {string}
     * @memberof UpdateUserRO
     */
    'code': string;
    /**
     * 用户姓名
     * @type {string}
     * @memberof UpdateUserRO
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UserVO
 */
export interface UserVO {
    /**
     * 
     * @type {string}
     * @memberof UserVO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVO
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVO
     */
    'name'?: string;
    /**
     * 
     * @type {Array<RoleVO>}
     * @memberof UserVO
     */
    'roles'?: Array<RoleVO>;
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 新增一个新的角色，每个角色的 code 必须具有唯一性。
         * @summary 新增角色
         * @param {NewRoleRO} newRoleRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewRole: async (newRoleRO: NewRoleRO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newRoleRO' is not null or undefined
            assertParamExists('addNewRole', 'newRoleRO', newRoleRO)
            const localVarPath = `/api/admin/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRoleRO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新增一个新的用户，每个用户的 code 必须具有唯一性。
         * @summary 新增用户
         * @param {NewUserRO} newUserRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewUser: async (newUserRO: NewUserRO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newUserRO' is not null or undefined
            assertParamExists('addNewUser', 'newUserRO', newUserRO)
            const localVarPath = `/api/admin/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newUserRO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 为用户添加角色。
         * @summary 为用户添加角色
         * @param {AddRoleToUserRO} addRoleToUserRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRoleToUser: async (addRoleToUserRO: AddRoleToUserRO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addRoleToUserRO' is not null or undefined
            assertParamExists('addRoleToUser', 'addRoleToUserRO', addRoleToUserRO)
            const localVarPath = `/api/admin/user/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addRoleToUserRO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据角色的 id 删除角色。
         * @summary 删除角色
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (roleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('deleteRole', 'roleId', roleId)
            const localVarPath = `/api/admin/role/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据用户的 id 删除用户。
         * @summary 删除用户
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/api/admin/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 列出所有角色
         * @summary 列出所有角色
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllRoles: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/role/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 列出所有用户
         * @summary 列出所有用户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 从用户移除角色。
         * @summary 从用户移除角色
         * @param {string} userId 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromUser: async (userId: string, roleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeRoleFromUser', 'userId', userId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('removeRoleFromUser', 'roleId', roleId)
            const localVarPath = `/api/admin/user/{userId}/role/{roleId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 解锁用户。
         * @summary 解锁用户
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlockUser: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('unlockUser', 'userId', userId)
            const localVarPath = `/api/admin/user/unlock/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新角色基本信息。
         * @summary 更新角色
         * @param {UpdateRoleRO} updateRoleRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (updateRoleRO: UpdateRoleRO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRoleRO' is not null or undefined
            assertParamExists('updateRole', 'updateRoleRO', updateRoleRO)
            const localVarPath = `/api/admin/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoleRO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新用户基本信息。
         * @summary 更新用户
         * @param {UpdateUserRO} updateUserRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (updateUserRO: UpdateUserRO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserRO' is not null or undefined
            assertParamExists('updateUser', 'updateUserRO', updateUserRO)
            const localVarPath = `/api/admin/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 新增一个新的角色，每个角色的 code 必须具有唯一性。
         * @summary 新增角色
         * @param {NewRoleRO} newRoleRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewRole(newRoleRO: NewRoleRO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewRole(newRoleRO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.addNewRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新增一个新的用户，每个用户的 code 必须具有唯一性。
         * @summary 新增用户
         * @param {NewUserRO} newUserRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewUser(newUserRO: NewUserRO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewUser(newUserRO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.addNewUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 为用户添加角色。
         * @summary 为用户添加角色
         * @param {AddRoleToUserRO} addRoleToUserRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRoleToUser(addRoleToUserRO: AddRoleToUserRO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRoleToUser(addRoleToUserRO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.addRoleToUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据角色的 id 删除角色。
         * @summary 删除角色
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.deleteRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据用户的 id 删除用户。
         * @summary 删除用户
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 列出所有角色
         * @summary 列出所有角色
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllRoles(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleVO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllRoles(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.listAllRoles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 列出所有用户
         * @summary 列出所有用户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserVO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.listAllUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 从用户移除角色。
         * @summary 从用户移除角色
         * @param {string} userId 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeRoleFromUser(userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeRoleFromUser(userId, roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.removeRoleFromUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 解锁用户。
         * @summary 解锁用户
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlockUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlockUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.unlockUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 更新角色基本信息。
         * @summary 更新角色
         * @param {UpdateRoleRO} updateRoleRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(updateRoleRO: UpdateRoleRO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(updateRoleRO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.updateRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 更新用户基本信息。
         * @summary 更新用户
         * @param {UpdateUserRO} updateUserRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(updateUserRO: UpdateUserRO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(updateUserRO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 新增一个新的角色，每个角色的 code 必须具有唯一性。
         * @summary 新增角色
         * @param {NewRoleRO} newRoleRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewRole(newRoleRO: NewRoleRO, options?: RawAxiosRequestConfig): AxiosPromise<RoleVO> {
            return localVarFp.addNewRole(newRoleRO, options).then((request) => request(axios, basePath));
        },
        /**
         * 新增一个新的用户，每个用户的 code 必须具有唯一性。
         * @summary 新增用户
         * @param {NewUserRO} newUserRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewUser(newUserRO: NewUserRO, options?: RawAxiosRequestConfig): AxiosPromise<UserVO> {
            return localVarFp.addNewUser(newUserRO, options).then((request) => request(axios, basePath));
        },
        /**
         * 为用户添加角色。
         * @summary 为用户添加角色
         * @param {AddRoleToUserRO} addRoleToUserRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRoleToUser(addRoleToUserRO: AddRoleToUserRO, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.addRoleToUser(addRoleToUserRO, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据角色的 id 删除角色。
         * @summary 删除角色
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(roleId: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.deleteRole(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据用户的 id 删除用户。
         * @summary 删除用户
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 列出所有角色
         * @summary 列出所有角色
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllRoles(options?: RawAxiosRequestConfig): AxiosPromise<Array<RoleVO>> {
            return localVarFp.listAllRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * 列出所有用户
         * @summary 列出所有用户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserVO>> {
            return localVarFp.listAllUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 从用户移除角色。
         * @summary 从用户移除角色
         * @param {string} userId 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromUser(userId: string, roleId: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.removeRoleFromUser(userId, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 解锁用户。
         * @summary 解锁用户
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlockUser(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.unlockUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新角色基本信息。
         * @summary 更新角色
         * @param {UpdateRoleRO} updateRoleRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole(updateRoleRO: UpdateRoleRO, options?: RawAxiosRequestConfig): AxiosPromise<RoleVO> {
            return localVarFp.updateRole(updateRoleRO, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新用户基本信息。
         * @summary 更新用户
         * @param {UpdateUserRO} updateUserRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(updateUserRO: UpdateUserRO, options?: RawAxiosRequestConfig): AxiosPromise<UserVO> {
            return localVarFp.updateUser(updateUserRO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 新增一个新的角色，每个角色的 code 必须具有唯一性。
     * @summary 新增角色
     * @param {NewRoleRO} newRoleRO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public addNewRole(newRoleRO: NewRoleRO, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).addNewRole(newRoleRO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新增一个新的用户，每个用户的 code 必须具有唯一性。
     * @summary 新增用户
     * @param {NewUserRO} newUserRO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public addNewUser(newUserRO: NewUserRO, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).addNewUser(newUserRO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 为用户添加角色。
     * @summary 为用户添加角色
     * @param {AddRoleToUserRO} addRoleToUserRO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public addRoleToUser(addRoleToUserRO: AddRoleToUserRO, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).addRoleToUser(addRoleToUserRO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据角色的 id 删除角色。
     * @summary 删除角色
     * @param {string} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public deleteRole(roleId: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).deleteRole(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据用户的 id 删除用户。
     * @summary 删除用户
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public deleteUser(userId: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 列出所有角色
     * @summary 列出所有角色
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public listAllRoles(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).listAllRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 列出所有用户
     * @summary 列出所有用户
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public listAllUsers(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).listAllUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 从用户移除角色。
     * @summary 从用户移除角色
     * @param {string} userId 
     * @param {string} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public removeRoleFromUser(userId: string, roleId: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).removeRoleFromUser(userId, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 解锁用户。
     * @summary 解锁用户
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public unlockUser(userId: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).unlockUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新角色基本信息。
     * @summary 更新角色
     * @param {UpdateRoleRO} updateRoleRO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public updateRole(updateRoleRO: UpdateRoleRO, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).updateRole(updateRoleRO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新用户基本信息。
     * @summary 更新用户
     * @param {UpdateUserRO} updateUserRO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public updateUser(updateUserRO: UpdateUserRO, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).updateUser(updateUserRO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 用于获取验证令牌数字签名的公钥
         * @summary 获取公钥
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwk: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/jwk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 通过用户代码和密码登录获取令牌
         * @summary 登录
         * @param {LoginRO} loginRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRO: LoginRO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRO' is not null or undefined
            assertParamExists('login', 'loginRO', loginRO)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 用刷新令牌换发新的访问令牌
         * @summary 换发新令牌
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: async (body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('refresh', 'body', body)
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 用于获取验证令牌数字签名的公钥
         * @summary 获取公钥
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJwk(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJwk(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.getJwk']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 通过用户代码和密码登录获取令牌
         * @summary 登录
         * @param {LoginRO} loginRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRO: LoginRO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 用刷新令牌换发新的访问令牌
         * @summary 换发新令牌
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refresh(body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.refresh']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 用于获取验证令牌数字签名的公钥
         * @summary 获取公钥
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwk(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getJwk(options).then((request) => request(axios, basePath));
        },
        /**
         * 通过用户代码和密码登录获取令牌
         * @summary 登录
         * @param {LoginRO} loginRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRO: LoginRO, options?: RawAxiosRequestConfig): AxiosPromise<TokenVO> {
            return localVarFp.login(loginRO, options).then((request) => request(axios, basePath));
        },
        /**
         * 用刷新令牌换发新的访问令牌
         * @summary 换发新令牌
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(body: string, options?: RawAxiosRequestConfig): AxiosPromise<TokenVO> {
            return localVarFp.refresh(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 用于获取验证令牌数字签名的公钥
     * @summary 获取公钥
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getJwk(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getJwk(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 通过用户代码和密码登录获取令牌
     * @summary 登录
     * @param {LoginRO} loginRO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(loginRO: LoginRO, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(loginRO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 用刷新令牌换发新的访问令牌
     * @summary 换发新令牌
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refresh(body: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).refresh(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CaptchaApi - axios parameter creator
 * @export
 */
export const CaptchaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 获取验证码
         * @summary 获取验证码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaptcha: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/captcha`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 验证用户输入的验证码是否正确
         * @summary 验证验证码
         * @param {CaptchaRO} captchaRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCaptcha: async (captchaRO: CaptchaRO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'captchaRO' is not null or undefined
            assertParamExists('validateCaptcha', 'captchaRO', captchaRO)
            const localVarPath = `/captcha`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(captchaRO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaptchaApi - functional programming interface
 * @export
 */
export const CaptchaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CaptchaApiAxiosParamCreator(configuration)
    return {
        /**
         * 获取验证码
         * @summary 获取验证码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaptcha(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaptchaVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaptcha(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CaptchaApi.getCaptcha']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 验证用户输入的验证码是否正确
         * @summary 验证验证码
         * @param {CaptchaRO} captchaRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateCaptcha(captchaRO: CaptchaRO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateCaptcha(captchaRO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CaptchaApi.validateCaptcha']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CaptchaApi - factory interface
 * @export
 */
export const CaptchaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CaptchaApiFp(configuration)
    return {
        /**
         * 获取验证码
         * @summary 获取验证码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaptcha(options?: RawAxiosRequestConfig): AxiosPromise<CaptchaVO> {
            return localVarFp.getCaptcha(options).then((request) => request(axios, basePath));
        },
        /**
         * 验证用户输入的验证码是否正确
         * @summary 验证验证码
         * @param {CaptchaRO} captchaRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCaptcha(captchaRO: CaptchaRO, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.validateCaptcha(captchaRO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CaptchaApi - object-oriented interface
 * @export
 * @class CaptchaApi
 * @extends {BaseAPI}
 */
export class CaptchaApi extends BaseAPI {
    /**
     * 获取验证码
     * @summary 获取验证码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaApi
     */
    public getCaptcha(options?: RawAxiosRequestConfig) {
        return CaptchaApiFp(this.configuration).getCaptcha(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 验证用户输入的验证码是否正确
     * @summary 验证验证码
     * @param {CaptchaRO} captchaRO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaApi
     */
    public validateCaptcha(captchaRO: CaptchaRO, options?: RawAxiosRequestConfig) {
        return CaptchaApiFp(this.configuration).validateCaptcha(captchaRO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 修改当前用户密码
         * @summary 修改当前用户密码
         * @param {ChangePasswordRO} changePasswordRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (changePasswordRO: ChangePasswordRO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordRO' is not null or undefined
            assertParamExists('changePassword', 'changePasswordRO', changePasswordRO)
            const localVarPath = `/api/user/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取当前调用此接口的用户基本信息
         * @summary 获取当前用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 修改当前用户密码
         * @summary 修改当前用户密码
         * @param {ChangePasswordRO} changePasswordRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(changePasswordRO: ChangePasswordRO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(changePasswordRO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.changePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取当前调用此接口的用户基本信息
         * @summary 获取当前用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 修改当前用户密码
         * @summary 修改当前用户密码
         * @param {ChangePasswordRO} changePasswordRO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(changePasswordRO: ChangePasswordRO, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.changePassword(changePasswordRO, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取当前调用此接口的用户基本信息
         * @summary 获取当前用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(options?: RawAxiosRequestConfig): AxiosPromise<UserVO> {
            return localVarFp.getUserInfo(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 修改当前用户密码
     * @summary 修改当前用户密码
     * @param {ChangePasswordRO} changePasswordRO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public changePassword(changePasswordRO: ChangePasswordRO, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).changePassword(changePasswordRO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取当前调用此接口的用户基本信息
     * @summary 获取当前用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserInfo(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserInfo(options).then((request) => request(this.axios, this.basePath));
    }
}



